"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–∫–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
—Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏
–≤–≤–µ–¥–µ–Ω–Ω—ã—Ö/—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
–í–µ—Ä—Å–∏—è: 1.0
"""

import json
from io import BytesIO
import pandas as pd
import requests
import streamlit as st
from random import uniform, randint


def get_min_value(feature: str, unique_values: dict) -> float:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–∞
    :param feature: –ø—Ä–∏–∑–Ω–∞–∫
    :param unique_values: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞
    :return: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞
    """
    return min(unique_values[feature])


def get_max_value(
    feature: str, unique_values: dict, params: any, user_inputs: dict
) -> float:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Å–ª–æ–≤–∏—è
    :param feature: –ø—Ä–∏–∑–Ω–∞–∫
    :param unique_values: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞
    :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–∞
    :param user_inputs: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
    :return: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞
    """
    if "condition" in params:
        if params["condition"]["type"] == "max_less_than_or_equal":
            condition_feature = params["condition"]["value"]
            condition_value = user_inputs.get(
                condition_feature, max(unique_values[condition_feature])
            )
            return min(max(unique_values[feature]), condition_value)
        elif params["condition"]["type"] == "equal":
            condition_feature = params["condition"]["value"]
            return user_inputs.get(
                condition_feature, unique_values[condition_feature][0]
            )
        elif params["condition"]["type"] == "or":
            min_val = min(unique_values[feature])
            max_val = max(unique_values[feature])
            st.text({min_val, max_val})
            return max_val
    if "max" in params:
        return max(unique_values[params["max"]])
    else:
        return max(unique_values[feature])


def generate_random_values(
    unique_values: dict, feature_params: dict, user_inputs: dict, other_features: list
) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    :param unique_values: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    :param feature_params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è)
    :param user_inputs: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
    :param other_features: –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    :return: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    random_values = {}
    for feature, params in feature_params.items():
        if feature in other_features:
            min_val = get_min_value(params["min"], unique_values)
            max_val = get_max_value(
                feature, unique_values, params["condition"], user_inputs
            )
            if isinstance(min_val, int) and isinstance(max_val, int):
                random_values[feature] = randint(min_val, max_val)
            else:
                random_values[feature] = uniform(min_val, max_val)
            user_inputs[feature] = random_values[feature]  # –û–±–Ω–æ–≤–ª—è–µ–º user_inputs
    return random_values


def display_input_fields(
    unique_values: dict,
    feature_params: dict,
    user_inputs: dict,
    important_features: list = None,
    other_features: list = None,
    random_values: dict = None,
) -> None:
    """
    –í—ã–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω
    :param unique_values: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    :param feature_params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è)
    :param user_inputs: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
    :param important_features: —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥—è—Ç—Å—è –≤—Ä—É—á–Ω—É—é
    :param other_features: –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    :param random_values: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω–æ
    """
    if important_features:
        for feature in important_features:
            params = feature_params[feature]
            min_val = get_min_value(params["min"], unique_values)
            max_val = get_max_value(feature, unique_values, params, user_inputs)

            input_key = f"{feature}_input"
            st.markdown(
                f'<h1 class="custom-title_6">–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è {feature}: {min_val, max_val}</h1>',
                unsafe_allow_html=True,
            )
            if user_inputs.get(feature) is None:
                user_inputs[feature] = st.number_input(
                    label=params["label"],
                    min_value=min_val,
                    max_value=max_val,
                    key=input_key,
                )

    if other_features:
        for feature in other_features:
            params = feature_params[feature]
            min_val = get_min_value(params["min"], unique_values)
            max_val = get_max_value(feature, unique_values, params, user_inputs)

            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ st.number_input
            input_key = f"{feature}_input"

            if random_values and feature in random_values:
                default_value = min(random_values[feature], max_val)
                user_inputs[feature] = st.number_input(
                    label=params["label"],
                    min_value=min_val,
                    max_value=max_val,
                    value=default_value,
                    key=input_key,
                )
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                feature_type = type(min_val)
                if feature_type == float:
                    default_value = 10.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è int
                else:
                    default_value = 10
                st.markdown(
                    f'<h1 class="custom-title_6">–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è {feature}: {min_val, max_val}</h1>',
                    unsafe_allow_html=True,
                )
                user_inputs[feature] = st.number_input(
                    label=params["label"],
                    min_value=min_val,
                    max_value=max_val,
                    key=input_key,
                    value=default_value,
                )


def evaluate_input(
    unique_data_path: str, param_features_path: str, endpoint: object
) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –≤ UI -> –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    :param unique_data_path: –ø—É—Ç—å –¥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    :param param_features_path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    :param endpoint: endpoint
    """
    with open(unique_data_path, encoding="utf-8") as file:
        unique_df = json.load(file)

    with open(param_features_path, encoding="utf-8") as file:
        feature_params = json.load(file)

    st.markdown("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ **–æ—Å–Ω–æ–≤–Ω—ã–µ** –ø–æ–ª—è:")
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    important_features = [
        "–°–µ–±–µ—Å—Ç–ü—Ä–æ–¥_–û—Ç—á",
        "–ê–∫—Ç–∏–≤_–í–Ω–µ–û–±–ê_–ü—Ä–µ–¥",
        "–ü–∞—Å—Å–∏–≤_–ö–∞–ø–†–µ–∑_–ù–µ—Ä–∞—Å–ø–ü—Ä–∏–±_–ü—Ä–µ–¥",
        "–í–∞–ª–æ–≤–∞—è–ü—Ä–∏–±—ã–ª—å_–û—Ç—á",
        "–ê–∫—Ç–∏–≤_–û–±–ê_–û—Ç—á",
        "–ê–∫—Ç–∏–≤_–û–±–ê_–î–µ–Ω–µ–∂–Ω–°—Ä_–û—Ç—á",
        "–ê–∫—Ç–∏–≤_–í–Ω–µ–û–±–ê_–û—Ç—á",
        "–ü–∞—Å—Å–∏–≤_–ö–∞–ø–†–µ–∑_–£—Å—Ç–∞–≤–ö–∞–ø–∏—Ç–∞–ª_–û—Ç—á",
        "–ê–∫—Ç–∏–≤_–û–±–ê_–î–µ–±–ó–∞–¥_–û—Ç—á",
        "–ê–∫—Ç–∏–≤_–í–Ω–µ–û–±–ê_–û—Å–Ω–°—Ä_–û—Ç—á",
        "–ü–∞—Å—Å–∏–≤_–ö–∞–ø–†–µ–∑_–ù–µ—Ä–∞—Å–ø–ü—Ä–∏–±_–û—Ç—á",
        "–í—ã—Ä—É—á_–û—Ç—á",
        "–ü—Ä–ê—É–¥–∏—Ç",
    ]

    col1, col2 = st.columns(2)
    with col1:
        user_inputs = {}
        display_input_fields(
            unique_values=unique_df,
            feature_params=feature_params,
            user_inputs=user_inputs,
            important_features=important_features,
        )

    with col2:
        choice = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ **–æ—Å—Ç–∞–ª—å–Ω—ã—Ö** –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            ["–†—É—á–Ω–æ–π –≤–≤–æ–¥", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ"],
        )

        other_features = [
            feature for feature in feature_params if feature not in important_features
        ]

        if choice == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
            display_input_fields(
                unique_values=unique_df,
                feature_params=feature_params,
                user_inputs=user_inputs,
                other_features=other_features,
            )
        elif choice == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ":
            random_values = generate_random_values(
                unique_df, feature_params, user_inputs, other_features
            )
            st.warning(
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ø—É—Å—Ç–∏—Ç–µ—Å—å –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã", icon="üí°"
            )
            st.markdown(
                '<h1 class="custom-title_4">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:</h1>',
                unsafe_allow_html=True,
            )
            display_input_fields(
                unique_values=unique_df,
                feature_params=feature_params,
                user_inputs=user_inputs,
                other_features=other_features,
                random_values=random_values,
            )

    button_ok = st.button("–ù–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üîÆ")
    if button_ok:
        with st.spinner("‚ú® –¥–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ ‚ú®"):
            result = requests.post(endpoint, timeout=8005, json=user_inputs)
            json_str = json.dumps(result.json())
            output = json.loads(json_str)
            st.success("–£—Å–ø–µ—à–Ω–æ!")
            st.write(f"{output}")
            return output


def evaluate_from_file(
    data: pd.DataFrame, endpoint: object, files: BytesIO
) -> pd.DataFrame:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–∞ -> –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    :param data: –¥–∞—Ç–∞—Å–µ—Ç
    :param endpoint: endpoint
    :param files: —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    :return: –¥–∞—Ç–∞—Å–µ—Ç
    """

    button_ok = st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    if button_ok:
        with st.spinner("–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
            # –∑–∞–≥–ª—É—à–∫–∞ —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            data_ = data[:10]
            output = requests.post(endpoint, files=files, timeout=8000)
            data_["predict"] = output.json()["prediction"]
            col1, col2 = st.columns([8, 2])
            with col1:
                st.write(data_[:10])
            with col2:
                st.write(data_["predict"][:10])
            return data_[:10]
